//  Copyright (c) 2015 Jian_wei Li
//
//  Competency test for GSoC2015

#include <stdio.h>
#include <stdlib.h>

namespace G_E{
#define MAXN 105

int r=3, c=4;
long d[MAXN][MAXN];  //A solution set
long x[MAXN];        // 
long  xcnt;          // Solution set number 

long GCD(long a, long b) 
{
	if(!b) {
		return a;
	}
	return GCD(b, a%b);
}

long ExpGcd(long a, long b, long &X, long &Y) 
{
	long q, temp;
	if( !b ) 
	{
		q = a; X = 1; Y = 0;
		return q;
	}
	else 
	{
		q = ExpGcd(b, a % b, X, Y);
		temp = X; 
		X = Y;
		Y = temp - (a / b) * Y;
		return q;
	}
}

long Mod(long a, long b, long c) 
{
	if(!b) 
	{
		return 1 % c;
	}
	return Mod(a*a%c, b/2, c) * ( (b&1)?a:1 ) % c; 
}

	void swap_row(int ra, int rb) 
	{
		for(int i = 0; i <= c; i++) 
		{
			long tmp = d[ra][i];
			d[ra][i] = d[rb][i];
			d[rb][i] = tmp;
		}
	}
	void swap_col(int ca, int cb) 
	{
		for(int i = 0; i < r; i++) 
		{
			long tmp = d[i][ca];
			d[i][ca] = d[i][cb];
			d[i][cb] = tmp;
		}        
	}

	void getAns(long mod) {
		for(int i = c-1; i >= 0; i--) {
			long tmp = d[i][c];
			for(int j = i+1; j < c; j++) {
				tmp = ((tmp - d[i][j] * x[j]) % mod + mod) % mod;
			}
			long X, Y;
			ExpGcd(d[i][i], mod, X, Y);
		}
	}

	// -1 said no solution
	long gauss(long mod) {
		int i, j, k;
		int col, maxrow;

		// Enum Rowï¼ŒStep col 
		for(i = 0, col = 0; i < r && col < c; i++) {
			//debug_print();
			maxrow = i;
			//Get maxmum col value among row i to r-1
			for(j = i+1; j < r; j++) {
				if( abs(d[j][col]) > abs(d[maxrow][col]) ){
					maxrow = j;
				}
			}
			//Exchange maxmum Row and Row i
			if(maxrow != i) {
				swap_row(i, maxrow);
			}
			if( d[i][col] == 0 ) {
				//The largest line of the current col value is equal to 0, continue to find the next column
				col ++;
				i--;
				continue; 
			}

			for(j = i+1; j < r; j++) {
				if( d[j][col] ) {
					//If current col value is not 0,then do elimination
					//Put the first line of the first col listed all of the elements of 0
					long lastcoff = d[i][col];
					long nowcoff = d[j][col];

					for(k = col; k <= c; k++) 
					{
						d[j][k] = (d[j][k] * lastcoff - d[i][k] * nowcoff) % mod;
						if (d[j][k] < 0) 
							d[j][k] += mod;
					}
				}
			}
			col ++;
		}
		//I said I back from all the matrix element is zero
		// If (0 0 0 0 0 0 d [j] [c]) (d) [j] [c]! = 0), the condition of no solution equation
		for(j = i; j < r; j++) 
		{
			if( d[j][c] ) {
				return -1;
			}
		}
		int free_num = c - i;

		// Exchange column, guarantee the final for strictly upper triangular matrix, and triangle on the following lines of 0
		for(i = 0; i < r && i < c; i++) 
		{
			if(!d[i][i]) 
			{
				// The diagonal to 0
				for(j = i+1; j < c; j++) 
				{
					if(d[i][j]) break;
				}
				if(j < c) {
					swap_col(i, j);
				}
			}
		}
		xcnt = ( ((long)1) << (long)free_num );

		getAns(mod);
		return xcnt;
	}    

	void debug_print() {
		int i, j;
		printf("-------------------------------\n");
		for(i = 0; i < r; i++) {
			for(j = 0; j < c; j++) {
				printf("%d ", d[i][j]);
			}
			puts("");
		}
		printf("-------------------------------\n");
	}  

	}
